@{
    ViewData["Title"] = "Notification System";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <style>
        body {
            background-color: #f4f4f9;
            font-family: Arial, sans-serif;
        }

        .container {
            margin-top: 50px;
        }

        .notification-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            padding: 15px;
            font-size: 20px;
            cursor: pointer;
        }

            .notification-btn:hover {
                background-color: #0056b3;
            }

        .notifications-list {
            position: fixed;
            top: 60px;
            right: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 250px;
            border-radius: 8px;
            padding: 10px;
            display: none;
            max-height: 300px;
            overflow-y: auto;
        }

            .notifications-list h5 {
                margin-top: 0;
            }

        .notification-item {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
        }

            .notification-item:hover {
                background-color: #e9ecef;
            }
    </style>
</head>
<body>

    <div class="container">
        <h1 class="text-center">Welcome to the Notification System</h1>
        <p class="text-center">This is a demo page to showcase notifications functionality with SignalR.</p>
    </div>

    <!-- Bildirim simgesi (Sayaç ve "+X" durumu) -->
    <button class="notification-btn" onclick="toggleNotifications()">
        🔔 <span id="notificationBadge" style="display: none; background: red; color: white; border-radius: 50%; padding: 5px 8px; font-size: 14px; position: absolute; top: 5px; right: 5px;">0</span>
    </button>

    <!-- Bildirim listesi -->
    <div class="notifications-list" id="notificationsList">
        <h5>Notifications</h5>
        <div id="notificationContainer"></div>
    </div>

    <script>
        console.log("SignalR bağlantısı başlatılıyor...");

        let notificationCount = 0; // Bildirim sayacı
        let notificationsQueue = []; // Bildirimleri tutan dizi
        let isNotificationsOpen = false; // Bildirimler listesi açık mı?

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:7019/notificationHub")
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start()
            .then(() => console.log("SignalR bağlantısı başarıyla kuruldu."))
            .catch(err => {
                console.error("SignalR bağlantısı kurulamadı. Hata:", err);
                alert("Bağlantı hatası! Lütfen daha sonra tekrar deneyin.");
            });

        connection.on("ReceiveNotification", function (message) {
            if (!message) {
                console.error("Mesaj boş geldi!");
                return;
            }

            console.log("Yeni bildirim alındı:", message);

            // Bildirimleri ekle
            notificationsQueue.push(message);

            // Eğer bildirimler listesi açık değilse sayaç artacak
            if (!isNotificationsOpen) {
                notificationCount++;
                updateNotificationBadge();
            }

            // Bildirimler sayısı 3'ü geçerse eski bildirimleri çıkar
            if (notificationsQueue.length > 3) {
                notificationsQueue.shift(); // İlk bildirim çıkarılır
            }

            const notificationContainer = document.getElementById("notificationContainer");

            if (!notificationContainer) {
                console.error("Bildirim container'ı bulunamadı!");
                return;
            }

            // Her zaman 3 bildirim olacak şekilde ekleme
            notificationContainer.innerHTML = ''; // Eski bildirimleri temizle
            notificationsQueue.forEach(function (notification) {
                const notificationElement = document.createElement("div");
                notificationElement.classList.add("notification-item");
                notificationElement.innerText = notification;
                notificationContainer.appendChild(notificationElement);
            });
        });

        // Bildirim simgesindeki sayaç güncellemesi
        function updateNotificationBadge() {
            const notificationBadge = document.getElementById("notificationBadge");

            if (notificationCount > 3) {
                notificationBadge.innerText = "+3";
            } else if (notificationCount > 0) {
                notificationBadge.innerText = notificationCount;
                notificationBadge.style.display = "inline-block";
            } else {
                notificationBadge.style.display = "none";
            }
        }

        // Bildirimleri açma / kapama
        function toggleNotifications() {
            var notificationList = document.getElementById('notificationsList');
            var notificationBadge = document.getElementById('notificationBadge');

            // Listeyi açarken simgeyi gizleme ve sayaç sıfırlama
            if (notificationList.style.display !== 'block') {
                notificationList.style.display = 'block';
                isNotificationsOpen = true; // Bildirimler açık
                console.log("Bildirimler gösteriliyor...");

                // Kullanıcı tıkladığında sayaç sıfırlanacak
                notificationCount = 0;
                updateNotificationBadge();
            } else {
                notificationList.style.display = 'none';
                isNotificationsOpen = false; // Bildirimler kapalı
                console.log("Bildirimler gizleniyor...");
            }
        }

        connection.onclose(() => {
            console.log("SignalR bağlantısı koparıldı.");
            alert("Bağlantı koptu! Yeniden bağlanılıyor...");
        });

        connection.onreconnected(() => {
            console.log("SignalR bağlantısı yeniden kuruldu.");
            alert("Bağlantı yeniden kuruldu!");
        });

        connection.onreconnecting(err => {
            console.log("SignalR bağlantısı yeniden bağlanmaya çalışıyor. Hata:", err);
        });
    </script>

</body>
</html>
